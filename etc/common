ELROND_HOME=${TOPLEVEL:="${ELROND_HOME}"}
ELROND_HOME=$(cd "${ELROND_HOME}"; pwd)
export ELROND_HOME

ELROND_BIN="${ELROND_HOME}"/bin
export ELROND_BIN

ELROND_DOC="${ELROND_HOME}"/docs
export ELROND_DOC

ELROND_ETC="${ELROND_HOME}"/etc
export ELROND_ETC

ELROND_LIB="${ELROND_HOME}"/lib
export ELROND_LIB

ELROND_SHARE="${ELROND_HOME}"/share
export ELROND_SHARE

ELROND_SRC="${ELROND_HOME}"/src
export ELROND_SRC

ELROND_VAR="${ELROND_HOME}"/var
export ELROND_VAR

ELROND_ARCHIVE="${ELROND_VAR}"/archive
export ELROND_ARCHIVE

ELROND_DATA="${ELROND_VAR}"/data
export ELROND_DATA

ELROND_DB="${ELROND_VAR}"/db
export ELROND_DB

ELROND_LOG="${ELROND_VAR}"/log
export ELROND_LOG

ELROND_RUN="${ELROND_VAR}"/run
export ELROND_RUN

ELROND_WWW="${ELROND_VAR}"/www
export ELROND_WWW

ELROND_REF="${ELROND_DOC}"/ref
export ELROND_REF

ELROND_CONFIGUREFLAGS="--prefix=${ELROND_HOME}" 
export ELROND_CONFIGUREFLAGS

ELROND_LOGFILE="${ELROND_LOG}"/elrond.log
export ELROND_LOGFILE

elrond_record()
{
        date                    >> "${ELROND_LOGFILE}"
        echo "$@"               >> "${ELROND_LOGFILE}"
}

elrond_recorde()
{
        elrond_record           "$@"
        echo                    "$@"
}

PATH="${ELROND_BIN}":"${PATH}"
export PATH

LD_LIBRARY_PATH="${ELROND_LIB}":"${LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH

PYTHONPATH="${ELROND_LIB}":"${ELROND_LIB}"/python:"${PYTHONPATH}"
export PYTHONPATH

if [ "${GLADE_CATALOG_PATH}" = "" ]; then
        GLADE_CATALOG_PATH="${ELROND_ETC}"/widget-catalog.d
else
        GLADE_CATALOG_PATH="${ELROND_ETC}"/widget-catalog.d:"${GLADE_CATALOG_PATH}"
fi

export GLADE_CATALOG_PATH

if [ -d "${ELROND_HOME}"/dist ]; then
	JARFILES="$(find "${ELROND_HOME}"/dist -name "*.jar")"
	for jarfile in ${JARFILES}; do
		CLASSPATH="${jarfile}":"${CLASSPATH}"
		export CLASSPATH
	done
fi

if [ -d "${ELROND_LIB}"/java ]; then
	JARFILES="$(find "${ELROND_LIB}"/java -name "*.jar")"
	for jarfile in ${JARFILES}; do
		CLASSPATH="${jarfile}":"${CLASSPATH}"
		export CLASSPATH
	done
fi

DEPENDS_HOME="${ELROND_SHARE}"
. "${DEPENDS_HOME}"/depends

ELROND_SVNFLAGS=
export ELROND_SVNFLAGS

ELROND_ACLOCALFLAGS="-I ${DEPENDS_HOME}/aclocal"
export ELROND_ACLOCALFLAGS

ELROND_MAKEFLAGS=
export ELROND_MAKEFLAGS

ELROND_PYTHONFLAGS=
export ELROND_PYTHONFLAGS

ELROND_PYLINTFLAGS=--rcfile="${ELROND_ETC}"/pylintrc
export ELROND_PYLINTFLAGS

ELROND_NOSETESTSFLAGS="--xunit-file=${ELROND_HOME}/test-report-python.xml --cover-html --cover-package=elrond -w ${ELROND_SRC}/python/elrond"
export ELROND_NOSETESTSFLAGS

ELROND_JAVAFLAGS="-Delrond.home=${ELROND_HOME} \
	-Djava.util.logging.config.file=${ELROND_ETC}/elrond.properties"
export ELROND_JAVAFLAGS

ELROND_ANTFLAGS=
export ELROND_ANTFLAGS

ELROND_EXTRAS=

EXTRAS="$(cat "${ELROND_HOME}"/.extras)"

for extra in ${EXTRAS}; do
        TOPLEVEL=

        LOCATIONS=" \
                ${ELROND_HOME}/extras/ \
                $(cd "${ELROND_HOME}"/..; pwd) \
                /opt \
        "

        for location in ${LOCATIONS}; do
                if [ -d "${location}/${extra}" ]; then
                        TOPLEVEL="${location}/${extra}"
                fi
        done

        ELROND_EXTRAS=" \
                ${ELROND_EXTRAS} \
                ${TOPLEVEL} \
        "
        export ELROND_EXTRAS

        . "${TOPLEVEL}"/etc/common
done

# $Id:$
#
# Local Variables:
# indent-tabs-mode: nil
# mode: sh
# sh-basic-offset: 8
# End:
# vim: ai et si sw=8 ts=8
